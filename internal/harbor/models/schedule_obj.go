// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleObj schedule obj
//
// swagger:model ScheduleObj
type ScheduleObj struct {

	// A cron expression, a time-based job scheduler.
	Cron string `json:"cron,omitempty"`

	// The schedule type. The valid values are 'Hourly', 'Daily', 'Weekly', 'Custom', 'Manual' and 'None'.
	// 'Manual' means to trigger it right away and 'None' means to cancel the schedule.
	//
	// Enum: [Hourly Daily Weekly Custom Manual None]
	Type string `json:"type,omitempty"`
}

// Validate validates this schedule obj
func (m *ScheduleObj) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scheduleObjTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Hourly","Daily","Weekly","Custom","Manual","None"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleObjTypeTypePropEnum = append(scheduleObjTypeTypePropEnum, v)
	}
}

const (

	// ScheduleObjTypeHourly captures enum value "Hourly"
	ScheduleObjTypeHourly string = "Hourly"

	// ScheduleObjTypeDaily captures enum value "Daily"
	ScheduleObjTypeDaily string = "Daily"

	// ScheduleObjTypeWeekly captures enum value "Weekly"
	ScheduleObjTypeWeekly string = "Weekly"

	// ScheduleObjTypeCustom captures enum value "Custom"
	ScheduleObjTypeCustom string = "Custom"

	// ScheduleObjTypeManual captures enum value "Manual"
	ScheduleObjTypeManual string = "Manual"

	// ScheduleObjTypeNone captures enum value "None"
	ScheduleObjTypeNone string = "None"
)

// prop value enum
func (m *ScheduleObj) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleObjTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleObj) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this schedule obj based on context it is used
func (m *ScheduleObj) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleObj) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleObj) UnmarshalBinary(b []byte) error {
	var res ScheduleObj
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
