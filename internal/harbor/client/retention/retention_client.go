// Code generated by go-swagger; DO NOT EDIT.

package retention

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new retention API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for retention API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRetention(params *CreateRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRetentionCreated, error)

	GetRentenitionMetadata(params *GetRentenitionMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRentenitionMetadataOK, error)

	GetRetention(params *GetRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRetentionOK, error)

	GetRetentionTaskLog(params *GetRetentionTaskLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRetentionTaskLogOK, error)

	ListRetentionExecutions(params *ListRetentionExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetentionExecutionsOK, error)

	ListRetentionTasks(params *ListRetentionTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetentionTasksOK, error)

	OperateRetentionExecution(params *OperateRetentionExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OperateRetentionExecutionOK, error)

	TriggerRetentionExecution(params *TriggerRetentionExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerRetentionExecutionOK, *TriggerRetentionExecutionCreated, error)

	UpdateRetention(params *UpdateRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRetentionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRetention creates retention policy

  Create Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when no retention policy binded to project yet.
*/
func (a *Client) CreateRetention(params *CreateRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRetentionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRetentionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRetention",
		Method:             "POST",
		PathPattern:        "/retentions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRetentionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRetentionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRetention: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRentenitionMetadata gets retention metadatas

  Get Retention Metadatas.
*/
func (a *Client) GetRentenitionMetadata(params *GetRentenitionMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRentenitionMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRentenitionMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRentenitionMetadata",
		Method:             "GET",
		PathPattern:        "/retentions/metadatas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRentenitionMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRentenitionMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRentenitionMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRetention gets retention policy

  Get Retention Policy.
*/
func (a *Client) GetRetention(params *GetRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRetentionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRetentionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRetention",
		Method:             "GET",
		PathPattern:        "/retentions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRetentionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRetentionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRetention: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRetentionTaskLog gets retention job task log

  Get Retention job task log, tags ratain or deletion detail will be shown in a table.
*/
func (a *Client) GetRetentionTaskLog(params *GetRetentionTaskLogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRetentionTaskLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRetentionTaskLogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRetentionTaskLog",
		Method:             "GET",
		PathPattern:        "/retentions/{id}/executions/{eid}/tasks/{tid}",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRetentionTaskLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRetentionTaskLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRetentionTaskLog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRetentionExecutions gets retention executions

  Get Retention executions, execution status may be delayed before job service schedule it up.
*/
func (a *Client) ListRetentionExecutions(params *ListRetentionExecutionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetentionExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetentionExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRetentionExecutions",
		Method:             "GET",
		PathPattern:        "/retentions/{id}/executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRetentionExecutionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRetentionExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRetentionExecutions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRetentionTasks gets retention tasks

  Get Retention tasks, each repository as a task.
*/
func (a *Client) ListRetentionTasks(params *ListRetentionTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListRetentionTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetentionTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listRetentionTasks",
		Method:             "GET",
		PathPattern:        "/retentions/{id}/executions/{eid}/tasks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRetentionTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRetentionTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listRetentionTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  OperateRetentionExecution stops a retention execution

  Stop a Retention execution, only support "stop" action now.
*/
func (a *Client) OperateRetentionExecution(params *OperateRetentionExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OperateRetentionExecutionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOperateRetentionExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "operateRetentionExecution",
		Method:             "PATCH",
		PathPattern:        "/retentions/{id}/executions/{eid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &OperateRetentionExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OperateRetentionExecutionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operateRetentionExecution: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TriggerRetentionExecution triggers a retention execution

  Trigger a Retention Execution, if dry_run is True, nothing would be deleted actually.
*/
func (a *Client) TriggerRetentionExecution(params *TriggerRetentionExecutionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerRetentionExecutionOK, *TriggerRetentionExecutionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerRetentionExecutionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "triggerRetentionExecution",
		Method:             "POST",
		PathPattern:        "/retentions/{id}/executions",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TriggerRetentionExecutionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TriggerRetentionExecutionOK:
		return value, nil, nil
	case *TriggerRetentionExecutionCreated:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for retention: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRetention updates retention policy

  Update Retention Policy, you can reference metadatas API for the policy model. You can check project metadatas to find whether a retention policy is already binded. This method should only be called when retention policy has already binded to project.
*/
func (a *Client) UpdateRetention(params *UpdateRetentionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateRetentionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRetentionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateRetention",
		Method:             "PUT",
		PathPattern:        "/retentions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRetentionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRetentionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateRetention: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
